// „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞
let game;
let shark;
let fishes;
let score = 0;
let highScore = parseInt(localStorage.getItem('sharkGameHighScore')) || 0;
let gameOver = false;
let gameStarted = false;
let startScreen;
let scoreText;
let timeText;
let gameOverText;
let highScoreText;
let timeLeft = 30;

// Phaser„ÅÆË®≠ÂÆö
const config = {
    type: Phaser.AUTO,
    parent: 'game-container',
    width: 800,
    height: 450,
    backgroundColor: '#4488AA',
    scale: {
        mode: Phaser.Scale.FIT,
        autoCenter: Phaser.Scale.CENTER_BOTH
    },
    physics: {
        default: 'arcade',
        arcade: {
            gravity: { y: 0 },
            debug: false
        }
    },
    scene: {
        create: create,
        update: update
    }
};

// „Ç≤„Éº„É†„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÅÆ‰ΩúÊàê
window.addEventListener('load', () => {
    game = new Phaser.Game(config);
});

function createStartScreen() {
    startScreen = this.add.group();

    const titleText = this.add.text(400, 120, '„Ç∑„É£„Éº„Åè„Çì„ÅÆ„Åä„Åï„Åã„Å™„Ç≠„É£„ÉÉ„ÉÅÔºÅ', {
        fontSize: '40px',
        fill: '#fff',
        align: 'center'
    });
    titleText.setOrigin(0.5);

    const sharkEmoji = this.add.text(400, 225, 'ü¶à', {
        fontSize: '72px',
        align: 'center',
        padding: { x: 32, y: 32 }
    });
    sharkEmoji.setOrigin(0.5);

    const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
    const controlsText = isMobile ? 
        '„Çø„ÉÉ„ÉóÔºÜ„Éâ„É©„ÉÉ„Ç∞„Åß„Ç∑„É£„Éº„Åè„Çì„ÇíÂãï„Åã„Åó„Å¶\n30Áßí‰ª•ÂÜÖ„Å´„Åü„Åè„Åï„Çì„ÅÆ„Åä„Åï„Åã„Å™„ÇíÈ£ü„Åπ„Çà„ÅÜÔºÅ' :
        'Áü¢Âç∞„Ç≠„Éº„Åß„Ç∑„É£„Éº„Åè„Çì„ÇíÂãï„Åã„Åó„Å¶\n30Áßí‰ª•ÂÜÖ„Å´„Åü„Åè„Åï„Çì„ÅÆ„Åä„Åï„Åã„Å™„ÇíÈ£ü„Åπ„Çà„ÅÜÔºÅ';
    
    const instructionText = this.add.text(400, 330, controlsText, {
        fontSize: '24px',
        fill: '#fff',
        align: 'center'
    });
    instructionText.setOrigin(0.5);

    startScreen.add(titleText);
    startScreen.add(sharkEmoji);
    startScreen.add(instructionText);

    // „Éè„Ç§„Çπ„Ç≥„Ç¢„ÇíÂè≥‰∏ä„Å´Ë°®Á§∫
    updateHighScoreText.call(this);
}

function create() {
    // „Çπ„Çø„Éº„ÉàÁîªÈù¢„ÅÆ‰ΩúÊàê
    createStartScreen.call(this);

    // „Ç≠„Éº„Éú„Éº„ÉâÂÖ•Âäõ„ÅÆË®≠ÂÆö
    this.cursors = this.input.keyboard.createCursorKeys();

    // „Çø„ÉÉ„ÉÅÊìç‰Ωú„ÅÆÂàùÊúüÂåñ
    this.touchStartPos = null;

    // „Çø„ÉÉ„ÉÅÊìç‰Ωú„ÅÆ„Ç§„Éô„É≥„ÉàË®≠ÂÆö
    this.input.on('pointermove', (pointer) => {
        if (gameStarted && !gameOver && this.touchStartPos) {
            const deltaX = pointer.x - this.touchStartPos.x;
            const deltaY = pointer.y - this.touchStartPos.y;
            
            shark.x += deltaX * 0.5;
            shark.y += deltaY * 0.5;
            
            if (deltaX < 0) {
                shark.setScale(1, 1);
            } else if (deltaX > 0) {
                shark.setScale(-1, 1);
            }
            
            shark.x = Phaser.Math.Clamp(shark.x, 0, config.width);
            shark.y = Phaser.Math.Clamp(shark.y, 0, config.height);
            
            this.touchStartPos = { x: pointer.x, y: pointer.y };
        }
    });

    // „Çø„ÉÉ„ÉÅÈñãÂßã
    this.input.on('pointerdown', (pointer) => {
        this.touchStartPos = { x: pointer.x, y: pointer.y };
        if (!gameStarted) {
            startGame.call(this);
        } else if (gameOver) {
            restartGame.call(this);
        }
    });

    // „Çø„ÉÉ„ÉÅÁµÇ‰∫Ü
    this.input.on('pointerup', () => {
        this.touchStartPos = null;
    });

    // „Ç≠„Éº„Éú„Éº„Éâ„Ç§„Éô„É≥„Éà
    this.input.keyboard.on('keydown', () => {
        if (!gameStarted) {
            startGame.call(this);
        } else if (gameOver) {
            restartGame.call(this);
        }
    });
}

function startGame() {
    if (gameStarted) return;
    
    gameStarted = true;
    score = 0;
    timeLeft = 30;
    
    // „Çπ„Çø„Éº„ÉàÁîªÈù¢„ÇíÂâäÈô§
    if (startScreen) {
        startScreen.clear(true, true);
    }
    
    // „Ç≤„Éº„É†Ë¶ÅÁ¥†„ÅÆÂàùÊúüÂåñ
    initializeGameElements.call(this);

    // „Çø„Ç§„Éû„Éº„ÅÆË®≠ÂÆöÔºà„Ç≤„Éº„É†ÈñãÂßãÊôÇ„ÅÆ„ÅøÔºâ
    this.time.addEvent({
        delay: 1000,
        callback: updateTimer,
        callbackScope: this,
        repeat: 29  // 30Áßí„ÅÆ„Åü„ÇÅ„ÄÅÊúÄÂàù„ÅÆ1Âõû + 29Âõû„ÅÆÁπ∞„ÇäËøî„Åó
    });

    // È≠ö„ÅÆÁîüÊàê„Çø„Ç§„Éû„Éº
    this.time.addEvent({
        delay: 1000,
        callback: () => createFish.call(this),
        callbackScope: this,
        loop: true
    });

    // „Åï„Çâ„Å´ËøΩÂä†„ÅÆÈ≠öÁîüÊàê„Çø„Ç§„Éû„Éº
    this.time.addEvent({
        delay: 1200,
        callback: () => createFish.call(this),
        callbackScope: this,
        loop: true
    });
}

function initializeGameElements() {
    // „Ç∑„É£„Éº„Åè„Çì„ÅÆ‰ΩúÊàê
    shark = this.add.text(400, 225, 'ü¶à', { 
        fontSize: '36px',
        padding: { x: 10, y: 10 }
    });
    shark.setOrigin(0.5);
    
    // „Ç∑„É£„Éº„Åè„Çì„ÅÆÁâ©ÁêÜÊºîÁÆóË®≠ÂÆö
    this.physics.world.enable(shark);
    shark.body.setCollideWorldBounds(true);
    shark.body.setBounce(0);
    shark.body.setDrag(0);

    // È≠ö„Ç∞„É´„Éº„Éó„ÅÆ‰ΩúÊàê
    fishes = this.physics.add.group({
        allowGravity: false,
        immovable: false,
        bounceX: 0,
        bounceY: 0,
        dragX: 0,
        dragY: 0
    });

    // „Çø„Ç§„Éû„Éº„ÉÜ„Ç≠„Çπ„Éà„ÅÆ‰ΩúÊàêÔºà‰∏äÈÉ®„Å´ÈÖçÁΩÆÔºâ
    timeText = this.add.text(16, 16, 'ÊÆã„ÇäÊôÇÈñì: 30Áßí', {
        fontSize: '24px',
        fill: '#fff'
    });

    // „Çπ„Ç≥„Ç¢„ÉÜ„Ç≠„Çπ„Éà„ÅÆ‰ΩúÊàêÔºà„Çø„Ç§„Éû„Éº„ÅÆ‰∏ã„Å´ÈÖçÁΩÆÔºâ
    scoreText = this.add.text(16, 56, '„Çπ„Ç≥„Ç¢: 0Âåπ', {
        fontSize: '24px',
        fill: '#fff'
    });

    // „Éè„Ç§„Çπ„Ç≥„Ç¢„ÉÜ„Ç≠„Çπ„Éà„ÅÆ‰ΩúÊàêÔºàÂè≥‰∏ä„Å´ÈÖçÁΩÆÔºâ
    highScoreText = this.add.text(config.width - 16, 16, '„Éè„Ç§„Çπ„Ç≥„Ç¢: ' + highScore + 'Âåπ', {
        fontSize: '24px',
        fill: '#fff'
    });
    highScoreText.setOrigin(1, 0);

    // Ë°ùÁ™ÅÂà§ÂÆö„ÅÆË®≠ÂÆö
    this.physics.add.overlap(shark, fishes, collectFish, null, this);
}

function update() {
    if (!gameStarted || gameOver) return;

    const SPEED = 300;

    // „Ç≠„Éº„Éú„Éº„ÉâÂÖ•Âäõ„ÅÆÂá¶ÁêÜ
    if (this.cursors.left.isDown) {
        shark.body.setVelocityX(-SPEED);
        shark.setScale(1, 1);
    } else if (this.cursors.right.isDown) {
        shark.body.setVelocityX(SPEED);
        shark.setScale(-1, 1);
    } else {
        shark.body.setVelocityX(0);
    }

    if (this.cursors.up.isDown) {
        shark.body.setVelocityY(-SPEED);
    } else if (this.cursors.down.isDown) {
        shark.body.setVelocityY(SPEED);
    } else {
        shark.body.setVelocityY(0);
    }

    // ÁîªÈù¢Â§ñ„ÅÆÈ≠ö„ÇíÂâäÈô§
    fishes.getChildren().forEach((fish) => {
        if (fish.x < -100 || fish.x > config.width + 100) {
            fish.destroy();
        }
    });
}

function collectFish(shark, fish) {
    fish.destroy();
    score += 1;
    scoreText.setText('„Çπ„Ç≥„Ç¢: ' + score + 'Âåπ');
    
    if (score > highScore) {
        highScore = score;
        localStorage.setItem('sharkGameHighScore', highScore);
        highScoreText.setText('„Éè„Ç§„Çπ„Ç≥„Ç¢: ' + highScore + 'Âåπ');
    }
}

function createFish() {
    if (!gameStarted || gameOver) return;

    const x = Math.random() < 0.5 ? -50 : config.width + 50;
    const y = Phaser.Math.Between(50, config.height - 50);
    
    const fish = this.add.text(x, y, 'üêü', { 
        fontSize: '24px'
    });
    fish.setOrigin(0.5);
    
    // È≠ö„ÅÆÁâ©ÁêÜÊºîÁÆó„ÇíÊúâÂäπÂåñ
    this.physics.world.enable(fish);
    fishes.add(fish);
    
    const speed = Phaser.Math.Between(100, 300);
    
    if (x < 0) {
        fish.body.setVelocityX(speed);
        fish.setScale(1, 1);
    } else {
        fish.body.setVelocityX(-speed);
        fish.setScale(-1, 1);
    }
}

function updateTimer() {
    if (!gameStarted) return;

    timeLeft--;
    timeText.setText('ÊÆã„ÇäÊôÇÈñì: ' + timeLeft + 'Áßí');
    
    if (timeLeft <= 0) {
        endGame.call(this);
    }
}

function endGame() {
    gameOver = true;

    if (score > highScore) {
        highScore = score;
        localStorage.setItem('sharkGameHighScore', highScore);
    }

    const gameOverMessage = 
        'ÁµÇ‰∫ÜÔºÅ\n' +
        '„Çπ„Ç≥„Ç¢: ' + score + 'Âåπ\n' +
        '„Çø„ÉÉ„Éó„Åó„Å¶„É™„Éà„É©„Ç§';
    
    gameOverText = this.add.text(
        config.width / 2,
        config.height / 2,
        gameOverMessage,
        {
            fontSize: '32px',
            fill: '#fff',
            align: 'center'
        }
    ).setOrigin(0.5);

    this.input.on('pointerdown', () => restartGame.call(this));
    fishes.clear(true, true);
}

function restartGame() {
    gameOver = false;
    gameStarted = false;
    score = 0;
    timeLeft = 30;
    
    if (gameOverText) gameOverText.destroy();
    if (shark) shark.destroy();
    if (scoreText) scoreText.destroy();
    if (timeText) timeText.destroy();
    if (highScoreText) highScoreText.destroy();
    
    fishes.clear(true, true);
    createStartScreen.call(this);
}

function updateHighScoreText() {
    if (highScoreText) {
        highScoreText.destroy();
    }
    
    highScoreText = this.add.text(
        config.width - 16,
        16,
        '„Éè„Ç§„Çπ„Ç≥„Ç¢: ' + highScore + 'Âåπ',
        {
            fontSize: '24px',
            fill: '#fff'
        }
    ).setOrigin(1, 0);
    
    startScreen.add(highScoreText);
}
