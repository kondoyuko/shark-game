// „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞
let scene;
let startScreen;
let gameOverScreen;
let shark;
let fishes;
let score = 0;
let highScore = parseInt(localStorage.getItem('sharkGameHighScore')) || 0;
let gameStarted = false;
let gameOver = false;
let timeText;
let scoreText;
let gameOverText;
let highScoreText;
let timeLeft = 30;
const GAME_DURATION = 30;

// Phaser„ÅÆË®≠ÂÆö
const config = {
    type: Phaser.AUTO,
    parent: 'game-container',
    width: 800,
    height: 600,
    backgroundColor: '#4488AA',
    scale: {
        mode: Phaser.Scale.FIT,
        autoCenter: Phaser.Scale.CENTER_BOTH
    },
    physics: {
        default: 'arcade',
        arcade: {
            gravity: { y: 0 },
            debug: false
        }
    },
    scene: {
        create: create,
        update: update
    }
};

// „Ç≤„Éº„É†„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÅÆ‰ΩúÊàê
const game = new Phaser.Game(config);

function create() {
    scene = this;
    this.cursors = this.input.keyboard.createCursorKeys();
    
    // „Çπ„Çø„Éº„ÉàÁîªÈù¢„ÅÆ‰ΩúÊàê
    createStartScreen.call(this);
    
    // „Çø„ÉÉ„ÉÅÊìç‰Ωú„ÅÆÂàùÊúüÂåñ
    this.touchStartPos = null;
    
    // „Çø„ÉÉ„ÉÅÊìç‰Ωú„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
    this.input.on('pointermove', (pointer) => {
        if (this.touchStartPos && gameStarted && !gameOver) {
            const dx = pointer.x - this.touchStartPos.x;
            const dy = pointer.y - this.touchStartPos.y;
            
            if (Math.abs(dx) > 10) {
                shark.body.setVelocityX(Math.sign(dx) * 300);
                shark.setScale(dx > 0 ? -1 : 1, 1);
            }
            
            if (Math.abs(dy) > 10) {
                shark.body.setVelocityY(Math.sign(dy) * 300);
            }
            
            this.touchStartPos = { x: pointer.x, y: pointer.y };
        }
    });
    
    this.input.on('pointerdown', (pointer) => {
        this.touchStartPos = { x: pointer.x, y: pointer.y };
    });
    
    this.input.on('pointerup', () => {
        this.touchStartPos = null;
        if (gameStarted && !gameOver) {
            shark.body.setVelocity(0, 0);
        }
    });
}

function createStartScreen() {
    startScreen = scene.add.container(0, 0);
    
    const title = scene.add.text(config.width / 2, 120, '„Ç∑„É£„Éº„Åè„Çì„ÅÆ\n„Åä„Åï„Åã„Å™„Ç≠„É£„ÉÉ„ÉÅÔºÅ', {
        fontSize: '36px',
        fill: '#fff',
        align: 'center',
        lineSpacing: 10
    }).setOrigin(0.5);
    
    const sharkEmoji = scene.add.text(config.width / 2, 230, 'ü¶à', {
        fontSize: '64px',
        padding: { x: 20, y: 20 }
    }).setOrigin(0.5);
    
    const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
    const controlsText = isMobile ? 
        '„Çø„ÉÉ„ÉóÔºÜ„Éâ„É©„ÉÉ„Ç∞„Åß„Ç∑„É£„Éº„Åè„Çì„ÇíÂãï„Åã„Åó„Å¶\n30Áßí‰ª•ÂÜÖ„Å´„Åü„Åè„Åï„Çì„ÅÆ„Åä„Åï„Åã„Å™„ÇíÈ£ü„Åπ„Çà„ÅÜÔºÅ' :
        'Áü¢Âç∞„Ç≠„Éº„Åß„Ç∑„É£„Éº„Åè„Çì„ÇíÂãï„Åã„Åó„Å¶\n30Áßí‰ª•ÂÜÖ„Å´„Åü„Åè„Åï„Çì„ÅÆ„Åä„Åï„Åã„Å™„ÇíÈ£ü„Åπ„Çà„ÅÜÔºÅ';
    
    const instructions = scene.add.text(config.width / 2, 320, controlsText, {
        fontSize: '20px',
        fill: '#fff',
        align: 'center',
        lineSpacing: 10
    }).setOrigin(0.5);
    
    const startButton = scene.add.text(config.width / 2, 400, '„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„Çπ„Çø„Éº„ÉàÔºÅ', {
        fontSize: '24px',
        fill: '#fff',
        backgroundColor: '#4a90e2',
        padding: { x: 20, y: 10 }
    }).setOrigin(0.5);
    
    startButton.setInteractive({ useHandCursor: true })
        .on('pointerover', () => startButton.setStyle({ fill: '#ff0' }))
        .on('pointerout', () => startButton.setStyle({ fill: '#fff' }))
        .on('pointerdown', () => startGame());

    // „Éè„Ç§„Çπ„Ç≥„Ç¢„ÇíÂè≥‰∏ä„Å´Ë°®Á§∫
    const highScoreText = scene.add.text(
        config.width - 16,
        16,
        '„Éè„Ç§„Çπ„Ç≥„Ç¢: ' + highScore + 'Âåπ',
        {
            fontSize: '20px',
            fill: '#fff'
        }
    ).setOrigin(1, 0);
    
    startScreen.add([title, sharkEmoji, instructions, startButton, highScoreText]);
}

function createGameOverScreen() {
    gameOverScreen = scene.add.container(0, 0);
    
    const gameOverText = scene.add.text(config.width / 2, 200, '„Ç≤„Éº„É†„Ç™„Éº„Éê„ÉºÔºÅ', {
        fontSize: '48px',
        fill: '#fff'
    }).setOrigin(0.5);
    
    const finalScore = scene.add.text(config.width / 2, 300, `„Çπ„Ç≥„Ç¢: ${score}Âåπ`, {
        fontSize: '32px',
        fill: '#fff'
    }).setOrigin(0.5);
    
    const highScoreText = scene.add.text(config.width / 2, 350, `„Éè„Ç§„Çπ„Ç≥„Ç¢: ${highScore}Âåπ`, {
        fontSize: '32px',
        fill: '#fff'
    }).setOrigin(0.5);
    
    const restartButton = scene.add.text(config.width / 2, 450, '„ÇÇ„ÅÜ‰∏ÄÂ∫¶ÈÅä„Å∂', {
        fontSize: '28px',
        fill: '#fff',
        backgroundColor: '#4a90e2',
        padding: { x: 20, y: 10 }
    }).setOrigin(0.5);
    
    restartButton.setInteractive({ useHandCursor: true })
        .on('pointerover', () => restartButton.setStyle({ fill: '#ff0' }))
        .on('pointerout', () => restartButton.setStyle({ fill: '#fff' }))
        .on('pointerdown', () => {
            gameOverScreen.destroy();
            createStartScreen.call(scene);
        });
    
    gameOverScreen.add([gameOverText, finalScore, highScoreText, restartButton]);
}

function startGame() {
    if (gameStarted) return;
    
    // „Çπ„Çø„Éº„ÉàÁîªÈù¢„ÇíÂâäÈô§
    if (startScreen) {
        startScreen.destroy();
    }
    
    // „Ç≤„Éº„É†Áä∂ÊÖã„ÅÆÂàùÊúüÂåñ
    gameStarted = true;
    gameOver = false;
    score = 0;
    timeLeft = GAME_DURATION;
    
    // „Ç∑„É£„Éº„Åè„Çì„ÅÆ‰ΩúÊàê
    shark = scene.add.text(400, 225, 'ü¶à', { 
        fontSize: '36px',
        padding: { x: 10, y: 10 }
    });
    shark.setOrigin(0.5);
    
    // „Ç∑„É£„Éº„Åè„Çì„ÅÆÁâ©ÁêÜÊºîÁÆóË®≠ÂÆö
    scene.physics.world.enable(shark);
    shark.body.setCollideWorldBounds(true);
    shark.body.setBounce(0);
    shark.body.setDrag(0);
    
    // ÂΩì„Åü„ÇäÂà§ÂÆö„ÅÆ„Çµ„Ç§„Ç∫„Å®‰ΩçÁΩÆ„ÇíË™øÊï¥ÔºàÂêë„Åç„Å´Èñ¢‰øÇ„Å™„Åè‰∏≠Â§Æ„Å´Âõ∫ÂÆöÔºâ
    const hitboxSize = Math.min(shark.width, shark.height) * 0.6;
    shark.body.setSize(hitboxSize, hitboxSize);
    shark.body.setOffset(
        (shark.width - hitboxSize) / 2,
        (shark.height - hitboxSize) / 2
    );

    // È≠ö„Ç∞„É´„Éº„Éó„ÅÆ‰ΩúÊàê
    fishes = scene.physics.add.group();

    // „Çø„Ç§„Éû„Éº„ÉÜ„Ç≠„Çπ„Éà„ÅÆ‰ΩúÊàêÔºà‰∏äÈÉ®„Å´ÈÖçÁΩÆÔºâ
    timeText = scene.add.text(16, 16, 'ÊÆã„ÇäÊôÇÈñì: ' + timeLeft + 'Áßí', {
        fontSize: '24px',
        fill: '#fff'
    });

    // „Çπ„Ç≥„Ç¢„ÉÜ„Ç≠„Çπ„Éà„ÅÆ‰ΩúÊàêÔºà„Çø„Ç§„Éû„Éº„ÅÆ‰∏ã„Å´ÈÖçÁΩÆÔºâ
    scoreText = scene.add.text(16, 56, '„Çπ„Ç≥„Ç¢: 0Âåπ', {
        fontSize: '24px',
        fill: '#fff'
    });

    // „Éè„Ç§„Çπ„Ç≥„Ç¢„ÉÜ„Ç≠„Çπ„Éà„ÅÆ‰ΩúÊàêÔºàÂè≥‰∏ä„Å´ÈÖçÁΩÆÔºâ
    highScoreText = scene.add.text(config.width - 16, 16, '„Éè„Ç§„Çπ„Ç≥„Ç¢: ' + highScore + 'Âåπ', {
        fontSize: '24px',
        fill: '#fff'
    });
    highScoreText.setOrigin(1, 0);

    // Ë°ùÁ™ÅÂà§ÂÆö„ÅÆË®≠ÂÆö
    scene.physics.add.overlap(shark, fishes, collectFish, null, scene);

    // È≠ö„ÅÆÁîüÊàê„Çø„Ç§„Éû„Éº
    scene.time.addEvent({
        delay: 1000,
        callback: createFish,
        callbackScope: scene,
        loop: true
    });

    // „Ç≤„Éº„É†„Çø„Ç§„Éû„Éº
    scene.time.addEvent({
        delay: 1000,
        callback: updateTimer,
        callbackScope: scene,
        loop: true
    });

    // ÊúÄÂàù„ÅÆÈ≠ö„ÇíÁîüÊàê
    createFish();
}

function update() {
    if (!gameStarted || gameOver) return;

    const SPEED = 300;

    // „Ç≠„Éº„Éú„Éº„ÉâÂÖ•Âäõ„ÅÆÂá¶ÁêÜ
    if (scene.cursors.left.isDown) {
        shark.body.setVelocityX(-SPEED);
        shark.setScale(1, 1);  // Â∑¶Âêë„Åç„Å´ÁßªÂãï„Åô„ÇãÂ†¥Âêà„ÄÅ„Çµ„É°„ÅØÂè≥Âêë„Åç
    } else if (scene.cursors.right.isDown) {
        shark.body.setVelocityX(SPEED);
        shark.setScale(-1, 1);   // Âè≥Âêë„Åç„Å´ÁßªÂãï„Åô„ÇãÂ†¥Âêà„ÄÅ„Çµ„É°„ÅØÂ∑¶Âêë„Åç
    } else {
        shark.body.setVelocityX(0);
    }

    if (scene.cursors.up.isDown) {
        shark.body.setVelocityY(-SPEED);
    } else if (scene.cursors.down.isDown) {
        shark.body.setVelocityY(SPEED);
    } else {
        shark.body.setVelocityY(0);
    }

    // ÁîªÈù¢Â§ñ„ÅÆÈ≠ö„ÇíÂâäÈô§
    fishes.getChildren().forEach((fish) => {
        if (fish.x < -100 || fish.x > config.width + 100) {
            fish.destroy();
        }
    });
}

function collectFish(shark, fish) {
    fish.destroy();
    score++;
    scoreText.setText('„Çπ„Ç≥„Ç¢: ' + score + 'Âåπ');
    
    if (score > highScore) {
        highScore = score;
        localStorage.setItem('sharkGameHighScore', highScore);
        highScoreText.setText('„Éè„Ç§„Çπ„Ç≥„Ç¢: ' + highScore + 'Âåπ');
    }
}

function createFish() {
    if (!gameStarted || gameOver) return;

    const x = Math.random() < 0.5 ? -50 : config.width + 50;
    const y = Phaser.Math.Between(50, config.height - 50);
    
    const fish = scene.add.text(x, y, 'üêü', { 
        fontSize: '24px'
    });
    fish.setOrigin(0.5);
    
    scene.physics.world.enable(fish);
    
    // È≠ö„ÅÆÂΩì„Åü„ÇäÂà§ÂÆö„ÅÆ„Çµ„Ç§„Ç∫„Å®‰ΩçÁΩÆ„ÇíË™øÊï¥ÔºàÂêë„Åç„Å´Èñ¢‰øÇ„Å™„Åè‰∏≠Â§Æ„Å´Âõ∫ÂÆöÔºâ
    const hitboxSize = Math.min(fish.width, fish.height) * 0.6;
    fish.body.setSize(hitboxSize, hitboxSize);
    fish.body.setOffset(
        (fish.width - hitboxSize) / 2,
        (fish.height - hitboxSize) / 2
    );
    
    fishes.add(fish);
    
    const speed = Phaser.Math.Between(100, 300);
    if (x < 0) {
        fish.body.setVelocityX(speed);
        fish.setScale(-1, 1);
    } else {
        fish.body.setVelocityX(-speed);
        fish.setScale(1, 1);
    }
}

function updateTimer() {
    if (!gameStarted) return;

    timeLeft--;
    timeText.setText('ÊÆã„ÇäÊôÇÈñì: ' + timeLeft + 'Áßí');
    
    if (timeLeft <= 0) {
        endGame.call(scene);
    }
}

function endGame() {
    gameStarted = false;
    gameOver = true;
    
    // „Çø„Ç§„Éû„Éº„Å®„Çπ„Ç≥„Ç¢„ÅÆË°®Á§∫„ÇíÂâäÈô§
    if (timeText) timeText.destroy();
    if (scoreText) scoreText.destroy();
    if (highScoreText) highScoreText.destroy();
    
    // „Ç∑„É£„Éº„ÇØ„Å®È≠ö„ÇíÂâäÈô§
    if (shark) shark.destroy();
    if (fishes) fishes.clear(true, true);
    
    // „Éè„Ç§„Çπ„Ç≥„Ç¢„ÇíÊõ¥Êñ∞
    if (score > highScore) {
        highScore = score;
        localStorage.setItem('sharkGameHighScore', highScore);
    }

    createGameOverScreen();
}

function restartGame() {
    // „Ç≤„Éº„É†„Ç™„Éº„Éê„ÉºÁîªÈù¢„ÇíÂâäÈô§
    if (gameOverScreen) {
        gameOverScreen.destroy();
    }
    
    // „Ç≤„Éº„É†Áä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
    gameStarted = false;
    gameOver = false;
    score = 0;
    timeLeft = GAME_DURATION;
    
    // „Çπ„Çø„Éº„ÉàÁîªÈù¢„Çí‰ΩúÊàê
    createStartScreen.call(scene);
}
